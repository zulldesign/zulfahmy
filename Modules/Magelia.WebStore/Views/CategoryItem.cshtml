@{
    var selected = false;
    var itemCssClass = "item ";
    var itemUrl = String.Empty;
    var path = String.Concat(this.Model.Path, this.Model.PathSeparator, this.Model.Item.Category.Code);

    if (this.Model.GenerateUrls)
    {
        itemUrl = this.Url.Content(this.Model.Tools.GenerateUrl(this.Model.Item));
        selected = new System.Text.RegularExpressions.Regex(String.Format(@".*{0}[?/]{{0,1}}.*", itemUrl), System.Text.RegularExpressions.RegexOptions.IgnoreCase).IsMatch(this.Request.Url.ToString());
    }
    else
    {
        selected = this.Model.Item.Selected && String.Equals(this.Request.Url.AbsolutePath, this.Model.Tools.TargetPath.AbsolutePath, StringComparison.Ordinal);
        itemUrl = selected ? "javascript:void(0);" : this.Model.Tools.GetSelectUrl(path);
    }

    if (selected)
    {
        itemCssClass = String.Concat(itemCssClass, "selected");
    }

    var expanderCssClass = String.Format("expander {0}", this.Model.Item.Expanded ? this.Model.Item.Categories.Count > 0 ? "expanded" : "empty" : null);
    var expandUrl = this.Model.Tools.GetExpandUrl(this.Model.Item.Expanded, path);
}

<div>
    <a class="@expanderCssClass" href="@expandUrl">
        @T(this.Model.Item.Expanded ? "Collapse" : "Expand")
    </a>
    <a class="@itemCssClass" href="@itemUrl">
        @(String.IsNullOrEmpty(this.Model.Item.Category.Name) ? this.Model.Item.Category.Code : this.Model.Item.Category.Name)
    </a>
</div>

@if (this.Model.Item.Categories.Count > 0)
{ 
    <ul>
        @foreach (var category in this.Model.Item.Categories)
        { 
            <li>
                @Display(this.New.CategoryItem(CatalogHierarchyPartId: this.Model.CatalogHierarchyPartId, Item: category, Path: path, PathSeparator: this.Model.PathSeparator, Tools: this.Model.Tools, GenerateUrls: this.Model.GenerateUrls))
            </li>
        }
    </ul>
}